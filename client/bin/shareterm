#!/bin/bash

# This file is part of the shareterm project
# Copyright (C) 2011  Adrien LELONG
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Start a shared terminal (using a screen session) on target PC
#reverse tunnel is created and temporary private key is sent to server
#to allow SSH connection as guest user

LIBDIR='lib'
SHARETERMCFG=$HOME/.shareterm
if [ ! -f $SHARETERMCFG ]; then
    echo "You must set copnfiguration in $SHARETERMCFG"
    echo "You can use $LIBDIR/skel/shareterm.none as an example"
    exit 1;
fi

SSHPORT=''
source $SHARETERMCFG

if [ -z $SSHPORT ]; then
    SSHPORT=22
fi

SCREENCFG=$LIBDIR/screenmu
SSHKEYPATH=/tmp
SSHKEYFILE=$SSHKEYPATH/k.shareterm
SSFILE=$SSHKEYPATH/ss.shareterm

GUESTUSERNAME=guest
GUESTUSERHOME=/home/$GUESTUSERNAME

if [ -f $SSFILE ]; then
    echo 'Shareterm session already running!'
    exit 1
fi

rm -f $SSHKEYFILE
#Create and send the key
ssh-keygen -P '' -f $SSHKEYFILE
sudo -u $GUESTUSERNAME mkdir -p $GUESTUSERHOME/.ssh
sudo -u $GUESTUSERNAME cp $SSHKEYFILE.pub $GUESTUSERHOME/.ssh/authorized_keys

python $LIBDIR/access.py SHARESERV=$SHARESERV \
    SSHPORT=$SSHPORT \
    NETUSER=$NETUSER \
    SSHKEYFILE=$SSHKEYFILE \
    'COMMAND=sudo -u shareterm /usr/share/shareterm/createlink' > /tmp/createlink.out

ERR=$?
source /tmp/createlink.out
if [ ! "$ERR" == 0 ]; then
    print $MSG
    exit $ERR
fi

SSHPID=$CPID

################################################################################
# Start or resume the screen session
################################################################################

#Recheck for screen SUID first
if ! ls -l /usr/bin/screen|egrep '^...s'; then
    echo 'The screen executable is not SUID'
    echo 'Please provide your password to allow shareterm to fix it...'
    sudo chmod u+s /usr/bin/screen || exit 4
    sudo chmod 755 /var/run/screen
fi

if ! ls -ld /var/run/screen|egrep '^drwxr-xr-x'; then
    echo '/var/run/screen must have mode 755'
    echo 'Please provide your password to allow shareterm to fix it...'
    sudo chmod 755 /var/run/screen || exit 4
fi


echo $USER > $SSFILE
if screen -ls |egrep '^\s*[0-9]+\.share\b'>/tmp/screenss; then
    echo "screen session already running, rejoin."
    screen -x share
else
    echo "Open new screen session"
    screen -S share -c $SCREENCFG
fi

################################################################################
# Close the tunnel
################################################################################

echo 'Closing shared terminal'
sleep 1
kill $SSHPID
rm -f $SSHKEYFILE*
rm -f $SSFILE

