#!/usr/bin/env python

# This file is part of the shareterm project
# Copyright (C) 2011-2012  Adrien LELONG
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys

LIBDIR = '../lib'
sys.path.insert(0, LIBDIR)

import system
import sshrichclient
import paramiko
import interactive
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(system.logFileHandler('/tmp/shareterm.log', logging.DEBUG))
logger.addHandler(system.logOutHandler(logging.INFO))


SHARETERMCFG = os.environ['HOME'] + '/.shareterm'
TARGET_USER = sys.argv[1]
command = 'sudo -u shareterm /usr/share/shareterm/jointerm.priv %s' % TARGET_USER

try:
    f = open(SHARETERMCFG)
except:
    print "You must set configuration in %s" % SHARETERMCFG
    exit(1)

config = system.Config(f.readlines())
f.close()

hostname = config.SHARESERV
username = config.NETUSER
password = ''
if hasattr(config, 'SSHPORT'):
    port = int(config.SSHPORT)
else:
    port = 22

logger.info("Connecting to %s's terminal" % TARGET_USER)
#Try to connect to the server
try:
    client = sshrichclient.SSHRichClient()
    client.load_system_host_keys()
    client.set_missing_host_key_policy(paramiko.WarningPolicy)
    client.connect(hostname, port, username)
except Exception, e:
    logger.error('Can\'t connect to server : %s: %s' % (e.__class__, e))
    try:
        client.close()
    except:
        pass
    sys.exit(1)

#Get informations on ports
stdin, stdout, stderr = client.exec_command(command + ' --info')
ports = system.Config(stdout.readlines())

if hasattr(ports, 'NEWGPORT') and hasattr(config, 'VNCVIEWPORT'):
    logger.info('Forwarding %(view)s to %(dist)s' % {'view' : config.VNCVIEWPORT, 'dist' : ports.NEWGPORT})
    client.local_forward(int(config.VNCVIEWPORT), 'localhost', int(ports.NEWGPORT))

if hasattr(ports, 'VNCPW') and hasattr(config, 'TMP_VNCPW_FILE'):
    logger.info('Get VNC encrypted password > %s to %s' % (ports.VNCPW, config.TMP_VNCPW_FILE))
    system.toFile(config.TMP_VNCPW_FILE, system.myDecod(ports.VNCPW))
elif os.path.exists(config.TMP_VNCPW_FILE):
    os.remove(config.TMP_VNCPW_FILE)

logger.info('Try to open the interactive terminal.')
chan = client.get_transport().open_session()
chan.get_pty(**interactive.get_term_env())
chan.exec_command(command)
interactive.interactive_shell(chan)
chan.close()

client.close()

